#
# Kubernetes configuration file for deploying this app along with a
# persistent PostgreSQL database on MicroK8s.
# Please see https://mvysny.github.io/kubernetes-vaadin-app-postgresql/ for an explanation how this works.
#
# To use this:
# 1. Enable necessary microk8s plugins: microk8s enable dns hostpath-storage registry
# 2. Build this app as a docker image and push it to microk8s internal registry:
#    1. docker build --no-cache -t localhost:32000/test/jdbi-orm-vaadin-crud-demo:latest .
#    2. docker push localhost:32000/test/jdbi-orm-vaadin-crud-demo
# 3. Apply this file: mkctl apply -f kubernetes-app.yaml

# We'll place everything into one namespace: jdbi-orm-vaadin-crud-demo
apiVersion: v1
kind: Namespace
metadata:
  name: jdbi-orm-vaadin-crud-demo
---

# First, we'll configure the app itself
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment
  namespace: jdbi-orm-vaadin-crud-demo
spec:
  selector:
    matchLabels:
      app: pod
  template:
    metadata:
      labels:
        app: pod
    spec:
      containers:
        - name: main
          image: localhost:32000/test/jdbi-orm-vaadin-crud-demo
          ports:
            - containerPort: 8080
          resources:
            limits:
              memory: "256Mi"  # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
              cpu: 1
          env:
            - name: JDBC_URL
              value: "jdbc:postgresql://postgres:5432/postgres"
            - name: JDBC_USERNAME
              value: postgres
            - name: JDBC_PASSWORD
              value: mysecretpassword
---
apiVersion: v1
kind: Service
metadata:
  name: service
  namespace: jdbi-orm-vaadin-crud-demo
spec:
  selector:
    app: pod
  ports:
    - port: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-main
  namespace: jdbi-orm-vaadin-crud-demo
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service
                port:
                  number: 8080

# Next, we'll configure the database.
# TODO
